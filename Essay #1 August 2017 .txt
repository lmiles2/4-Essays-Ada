Essay #1 August 2017 ADA Application
Throughout my career, I was a student of programming through the finished products I made, trained on and encouraged daily. My first formal application of programming of my own volition occurred when I made use of free courses Aquent provided in Web Development using lessons in HTML, CSS and javascript.  I finally understood what programming for web development was about.  Through exercises like writing a recipe for a Pisco Sour in HTML using CSS.  I formatted a website for the drink recipe.  It was successful and I had fun doing it.  I felt truly redeemed that I now had a way of muddling through successfully.  I completed the HTML and CSS portions of the course but needed Photoshop for the rest.  I exhausted avenues of procuring the program asking all my local family and other designers I knew if they had or could acquire more affordable copies of the Photoshop for me.  The only public use one available existed on one computer at the Downtown Seattle Library and needed to be reserved in 2 hour increments daily.  I live on the Eastside and had little income so it was difficult for me to make the trek for only a couple of hours daily that were not guaranteed.  In this way, I fell short of learning the javascript which would have aided me at Universal Music Group where I had a job in the Online Grassroots Marketing Department or in a graphic design career in web development.  I have since subscribed to the Cloud version of Adobe Creative Suite at an affordable $20.00/mo.  When I took the Aquent course recently, I began early.  I allocated ample free time to concentrate on each exercise.  It was in this I had much more of an understanding of how to program and my finished products turned out correctly.
My entrée into programming occurred on my path to graduation from Stanford – the bastion of Computer Science where companies like Hewlett-Packard, Apple, Yahoo!, Google and SnapChat came into existence.  Though I was surrounded by these greats, I was focused on business and Marketing particularly in the Entertainment world.  These were different skill sets I needed to develop – I majored in Psychology.  Along the way, I took a computer course entitled Intro to Computer Science.  In this course, I wrote programs which rarely worked and it was difficult to find the reason why.   I attempted to get extra help.  It was difficult to return a working finished product.
I was tapped to apply for an internship at Microsoft by a Stanford Alum.  With that Visual Basic I was told I could write my own ticket.  At the time, I didn’t even know that Visual Basic was a programming language.  The moment was pivotal in that one of the questions during my interview in the Marketing department at Microsoft Word was to name three ways I would improve the program.  I was intrigued by the question.  The maker of the mainstay of computer software was asking me, a student, for suggestions on improvements.  From that moment on, I looked at computer programs differently.  It empowered me.  Whenever I used a program, I evaluated how well it worked for me.  I noted when something could be done more easily and differently and I looked for different ways to accomplish the same thing in the program.   I used the interview as a point of reference to continue to evaluate computer programs.  As a Visual Media Specialist (Graphic Designer) for the Sales Development department at Franklin Templeton, my first job after college, a major part of my job was to merge programs into Microsoft PowerPoint via Lightwave 3D, Photoshop, Flash and Illustrator.  Often, I determined solutions that were developed by hacking techniques in PowerPoint created by my boss, a more senior designer, or dreamed up by me.  As a result, because of our innovative, groundbreaking techniques, Microsoft used our department as a tastemaker in a trial for a new programming component to PowerPoint.
As Director of Development for the Northwest African American Museum, I added a pledge reminder report into our eTapestry donor database system which did not exist in eTapestry but instead was presented as an upsell for those needing it.  My boss suggested I offer to sell my version of the pledge reminder report to eTapestry, but the company insisted they knew how to create it – it was just an upsell.  They then responded by including a Read Me file online with all the steps I took to create the report when they could have made it a simple function on the user interface.  The steps were advanced.
I brought with me my skills learned as a Documentation Specialist, Trainer and Change Management professional for SAP at AIG SunAmerica to inform the report.  When I first started with the SAP team, I could barely form an email asking the question I required.  I lacked that little understanding.  Then through training and writing training manuals which were used by over 2000+ executives began to understand SAP.  It was the understanding of the structures in the more user-friendly portions of SAP like the Travel and Expense module that I trained employees on how to use that allowed me to write the Pledge Reminder report in the eTapestry database.  In essence, when training I went back over the steps of the programmer explaining to the user how to accomplish the steps that were necessary.  It allowed me to view the brain of a programmer from the other side – the finished product in detail.  After creating this report in eTapestry, the records that were to be pulled when migrating the Urban League’s database with that of our own to create a stand-alone database for the Museum were coded by identifying which were those of the Urban League vs. those of the Museum.   That was my first experience using the Boolean method within programming to turn things on and off in order to select those things to be included within a request for an accomplishment of a programming task.
	When I last applied to ADA, it was in Cohort 8.  I completed the Jumpstart curriculum and was even asked to perform in Phase 2 the coding challenge where I programmed the Song Calculator.  I did the exercises and watched the videos for JumpStart lessons 9-12 to complete the coding challenge. I completed the Code School tutorial on Ruby.   I purchased the book Learn Ruby the Hard Way and used it while programming the Phase 2 Coding Challenge.  I entered my resume on GitHub with the markdown coding language.  With that, I learned how to structure things to both edit and create a gist.
My early years of intimidation with programming grew over time to a realization that putting the pieces together, being a lifelong student and constantly evaluating the steps of a program and their usefulness transforms one into someone with the aptitude for programming.   Getting started early, identifying and mapping out patterns and structures needed within it and devoting concentrated, focused time when creating a program makes a successful program. 
